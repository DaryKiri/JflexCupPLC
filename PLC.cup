/* import the cup package */
import java_cup.runtime.*;

import plUtils.*;

/* user code, action code declarations 
action code {: 
	public static int TMP = 0;
:};
*/

/* symbols */
terminal String NUMERO, IDENT;
terminal IGUAL, MAS, MENOS, UMENOS, POR, DIV, AP, CP, PYC;
terminal PRINT, IF, ELSE;

/* conditionals symbols */
terminal EQUALS, MAYOR, MENOR, DISTINTO;

/* open parenthesis and close parenthesis */
terminal APA, CPA; 

/* epsilon */

/* comprobar si todos los no terminales precisan de tener un string como valor */

non terminal String list_sent, sentencia, expresion, sentencia_simple, sentencia_comp;
non terminal String sent_print, else_if, condicion;
non terminal IfHolder sent_if; 
non terminal s;

/* precedences */
precedence 		left	MAS, MENOS;
precedence 		left	DIV, POR;
precedence 		left	UMENOS;
precedence 		left	AP, APA, ELSE, NUMERO, IDENT, PRINT, IF;

/* grammar */
s ::= list_sent;

list_sent ::= sentencia list_sent
			  |
			  sentencia
			  ;

sentencia ::= sentencia_simple 
			  |
			  sentencia_comp
			  ;

sentencia_comp ::= APA list_sent CPA;

sentencia_simple ::= expresion:e PYC {: RESULT = e; Utils.resetTmp(); :}
			 		 |
			 		 sent_print PYC
			 		 |
			 		 sent_if
			 		 ;

sent_print ::= PRINT AP expresion:e CP {: RESULT = e; System.out.println("print " + e + ";"); Utils.resetTmp(); :};

sent_if ::= IF AP condicion CP {: // para la ampliacion de composicion con operadores logicos, cambiar este bloque a antes de condicion
									RESULT = new IfHolder();
									RESULT.setIfLabel(Utils.getCurrentLabelString());
									Utils.incrementLabel();
									RESULT.setElseLabel(Utils.getCurrentLabelString());
									Utils.incrementLabel();
									RESULT.setFinalLabel(Utils.getCurrentLabelString());
									IfHolder.finalLabelStack.push(RESULT.getFinalLabel());
									Utils.incrementLabel();
									
									System.out.println("goto " + RESULT.getIfLabel() + ";");
									System.out.println("goto " + RESULT.getElseLabel() + ";");
									System.out.println(RESULT.getIfLabel() + ":");
								:} 
								list_sent 
								{:
									System.out.println("goto " + RESULT.getFinalLabel() + ";");
									System.out.println(RESULT.getElseLabel() + ":");
								:} 
								else_if 
			;

else_if ::=	ELSE list_sent {: System.out.println(IfHolder.finalLabelStack.pop() + ":"); :} // Imprimir Final label aqui
			| {: System.out.println(IfHolder.finalLabelStack.pop() + ":"); :} //pasar el objeto IfHolder aqui!!!
			;

condicion ::= expresion:e1 EQUALS expresion:e2 {: System.out.print("if (" + e1 + " == " + e2 + ") "); :}
			  |
			  expresion:e1 DISTINTO expresion:e2 {: System.out.print("if (" + e1 + " < " + e2 + ") "); :}
			  |
			  expresion:e1 MAYOR expresion:e2 {: System.out.print("if (" + e2 + " < " + e1 + ") "); :}
			  |
			  expresion:e1 MENOR expresion:e2 {: System.out.print("if (" + e1 + " < " + e2 + ") "); :}
			  ;

expresion ::= expresion:e1 MAS expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " + " + e2 + ";"); :}
			 |
			 expresion:e1 MENOS expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " - " + e2 + ";"); :}
			 |
			 expresion:e1 POR expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " * " + e2 + ";"); :}
			 |
			 expresion:e1 DIV expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + "= " + e1 + " / " + e2 + ";"); :}
			 |
			 MENOS expresion:e {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = -" + e + ";"); :}
			 %prec UMENOS
			 |
			 AP expresion:e CP {: RESULT = e; :}
			 |
			 IDENT:i IGUAL expresion:e {: RESULT = i; System.out.println(i + "=" + e + ";" ); :}
			 |
			 IDENT:i {: RESULT = i; :} 
			 |
			 NUMERO:n {: RESULT = n; :}
			 ;


