/* import the cup package */
import java_cup.runtime.*;

import plUtils.*;

/* user code, action code declarations 
action code {: 
	public static int TMP = 0;
:};
*/

/* symbols */
terminal String NUMERO, IDENT;
terminal IGUAL, MAS, MENOS, UMENOS, POR, DIV, AP, CP, PYC;
terminal PRINT, IF, ELSE;

/* conditionals symbols */
terminal EQUALS, MAYOR, MENOR, DISTINTO, MENORE, MAYORE;

/* open parenthesis and close parenthesis */
terminal APA, CPA; 

/* logical operators */
terminal AND, OR, NEGATION;

/* epsilon */

/* comprobar si todos los no terminales precisan de tener un string como valor */

non terminal String list_sent, sentencia, expresion, sentencia_simple, sentencia_comp;
non terminal String sent_print, else_if, rel_op;
non terminal IfHolder sent_if, condicion; 
non terminal s;

/* precedences */
precedence 		left	OR;
precedence 		left	AND;
precedence 		left	EQUALS, DISTINTO;
precedence 		left	MAYOR, MENOR, MAYORE, MENORE;
precedence 		left	MAS, MENOS;
precedence 		left	DIV, POR;
precedence 		left	UMENOS, NEGATION;
precedence 		left	AP, APA, ELSE, NUMERO, IDENT, PRINT, IF;

/* grammar */
s ::= list_sent;

list_sent ::= sentencia list_sent
			  |
			  sentencia
			  ;

sentencia ::= sentencia_simple 
			  |
			  sentencia_comp
			  ;

sentencia_comp ::= APA list_sent CPA;

sentencia_simple ::= expresion:e PYC {: RESULT = e; Utils.resetTmp(); :}
			 		 |
			 		 sent_print PYC
			 		 |
			 		 sent_if
			 		 ;

sent_print ::= PRINT AP expresion:e CP {: RESULT = e; System.out.println("print " + e + ";"); Utils.resetTmp(); :};

sent_if ::= IF AP condicion:cond CP {: // para composicion con operadores logicos, cambiar este bloque a antes de condicion Inciflabel?
									CondUtils.printLabels(cond.getIfLabels()); // Ln:
								:} 
								sentencia 
								{:
									CondUtils.printGoTo(cond.getFinalLabels()); // goto Ln;
									CondUtils.printLabels(cond.getElseLabels()); // Ln:
								:} 
								else_if {: CondUtils.printLabels(cond.getFinalLabels()); :} // Ln:
			;

else_if ::=	ELSE sentencia 
			| 
			;

// definir en Utils la variables de operacion logica y tener un metodo en utils para distinguir ifs
rel_op ::= 	EQUALS {: RESULT = CondUtils.EQUALS; :}
			|
			DISTINTO {: RESULT = CondUtils.DISTINTO; :}
			|
			MAYOR {: RESULT = CondUtils.MAYOR; :}
			|
			MENOR {: RESULT = CondUtils.MENOR; :}
			|
			MENORE {: RESULT = CondUtils.MENORE; :}
			|
			MAYORE {: RESULT = CondUtils.MAYORE; :}
			;

// condicion tiene un objeto IfHolder para despues poder usarse en sent_if
condicion ::= expresion:e1 rel_op:op expresion:e2 
			{:	
				CondUtils.printLogical(e1, op, e2); // Metodo para imprimir el if 
				RESULT = new IfHolder();
				RESULT.addIfLabel(Utils.getCurrentLabelString());
				Utils.incrementLabel();
				RESULT.addElseLabel(Utils.getCurrentLabelString());
				Utils.incrementLabel();
				RESULT.addFinalLabel(Utils.getCurrentLabelString());
				Utils.incrementLabel();
			:} 
			  |
			  condicion:c1 AND {: CondUtils.printLabels(c1.getIfLabels()); :} condicion:c2 
			  {: 
			  	RESULT = new IfHolder();
			  	RESULT.addIfLabel(c2.getIfLabels());
			  	RESULT.addElseLabel(c1.getElseLabels());
			  	RESULT.addElseLabel(c2.getElseLabels());
			  	RESULT.addFinalLabel(c1.getFinalLabels()); 
			  :}
			  |
			  condicion:c1 OR {: CondUtils.printLabels(c1.getElseLabels()); :} condicion:c2
			  {:
			  	RESULT = new IfHolder();
			  	RESULT.addIfLabel(c1.getIfLabels());
			  	RESULT.addIfLabel(c2.getIfLabels());
			  	RESULT.addElseLabel(c2.getElseLabels());
			  	RESULT.addFinalLabel(c1.getFinalLabels()); 
			  :}
			  |
			  NEGATION condicion:c 
			  {:  
			  	RESULT = new IfHolder();
			  	RESULT.addIfLabel(c.getElseLabels());
			  	RESULT.addElseLabel(c.getIfLabels());
			  	RESULT.addFinalLabel(c.getFinalLabels());
			  :}
			  |
			  AP condicion:c CP {: RESULT = c; :}
			  ;

expresion ::= expresion:e1 MAS expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " + " + e2 + ";"); :}
			 |
			 expresion:e1 MENOS expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " - " + e2 + ";"); :}
			 |
			 expresion:e1 POR expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = " + e1 + " * " + e2 + ";"); :}
			 |
			 expresion:e1 DIV expresion:e2 {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + "= " + e1 + " / " + e2 + ";"); :}
			 |
			 MENOS expresion:e {: RESULT = "$t" + Utils.getTmp(); System.out.println(RESULT + " = -" + e + ";"); :}
			 %prec UMENOS
			 |
			 AP expresion:e CP {: RESULT = e; :}
			 |
			 IDENT:i IGUAL expresion:e {: RESULT = i; System.out.println(i + "=" + e + ";" ); :}
			 |
			 IDENT:i {: RESULT = i; :} 
			 |
			 NUMERO:n {: RESULT = n; :}
			 ;


